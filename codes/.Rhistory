new.data1 = new.data[-c(25,48,53),])
new.data1 = new.data[-c(25,48,53),]
m3 = update(m2, data=new.data1)
plot(m3)
plot(m3)
plot(m3)
(outlier.pt = case0902[3,])
mod1 = lm(Brain ~ Body+Gestation, data=case0902)
mod2 = lm(Brain ~ Body + Body*Gestation, data=case0902)
anova(mod1, mod2)
anova(mod2)
BG =with(case0902, Body*Gentation)
BG =with(case0902, Body*Gestation)
mod2 = lm(Brain ~ Body + BG, data=case0902)
anova(mod1, mod2)
library(Sleuth3)
View(case0902)
names(case0902)
plot(case0902[,2:5])
m1 = lm(Brain ~ Body+Gestation+log(Litter), data=case0902)
summary(m1)
anova(m1)
plot(m1)
leverages = hat(model.matrix(m1)); plot(leverages)
stud.res = rstudent(m1); plot(stud.res); abline(h=0)
CooksD = cooks.distance(m1); plot(CooksD)
(outlier.pt = case0902[3,])
new.data = case0902[-3,]
m2 = update(m1, data=new.data)
summary(m2)
plot(m2)
par(mfrow=c(2,2))
plot(m1)
par(mfrow=c(1,1))
par(mfrow=c(2,2))
plot(m2)
par(mfrow=c(1,1))
(more.outliers = new.data[c(25,48,53),])
(more.outliers = case0902[c(25,48,53),])
new.data1 = case0902[-c(3,25,48,53),]
m3 = update(m2, data=new.data1)
par(mfrow=c(2,2))
plot(m3)
par(mfrow=c(1,1))
m = lm(log(Brain) ~ log(Body)+log(Gestation)+log(Litter), data=case0902)
summary(m)
par(mfrow=c(2,2))
plot(m)
par(mfrow=c(1,1))
View(case0902)
plot(case0902[,2:5])
summary(m1)
anova(m1)
par(mfrow=c(2,2))
plot(m1)
par(mfrow=c(1,1))
leverages = hat(model.matrix(m1)); plot(leverages)
stud.res = rstudent(m1); plot(stud.res); abline(h=0)
CooksD = cooks.distance(m1); plot(CooksD)
(outlier.pt = case0902[3,])
new.data = case0902[-3,]
m2 = update(m1, data=new.data)
summary(m2)
par(mfrow=c(2,2))
plot(m2)
par(mfrow=c(1,1))
par(mfrow=c(2,2))
plot(m1)
par(mfrow=c(1,1))
(more.outliers = case0902[c(25,48,53),])
new.data1 = case0902[-c(3,25,48,53),]
m3 = update(m2, data=new.data1)
summary(m3)
par(mfrow=c(2,2))
plot(m3)
par(mfrow=c(1,1))
plot(case0902[,2:5])
m = lm(log(Brain) ~ log(Body)+log(Gestation)+log(Litter), data=case0902)
summary(m)
par(mfrow=c(2,2))
plot(m)
par(mfrow=c(1,1))
library(VineCopula)
###### required for parallel computing
library(parallel)
library(doSNOW)
set.seed(006); N = 100
theta.range=seq(0,.99,.01)
dfs=c(20:25); mat=matrix(rep(0,6*length(dfs)), ncol=6)
for(i in 1:length(dfs)){
df = dfs[i]
## Simulates max depth copula estimators for all values in theta.range
loopfun = function(theta){
library(VineCopula)
maxdeps = rep(0,1000)
# Generate 1000 samples of size 100 each
for(i in 1:1000){
# Generate sample from t copula
U = BiCopSim(N, family=2, par=theta, par2=df)
u = U[,1]; v = U[,2]
est = BiCopEst(u, v, family=2, method='mle')
interval = c(0,.99)
# interval search algorithm
iterating=TRUE; iter=1; maxit=10
while(iterating){
theta.list = seq(interval[1], interval[2], length.out=10)
dep.list = rep(0,10)
for(j in 1:10){
del.loglik = BiCopDeriv(u,v,family=2,par=theta.list[j], par2=df, deriv="par") /
BiCopPDF(u,v,family=2,par=theta.list[j], par2=df)
dep.list[j] =(min(sum(del.loglik>0), sum(del.loglik<0)) + sum(del.loglik==0))/N
}
# stopping criteria
maxdep = max(na.omit(dep.list))
if(maxdep==0.5 || iter==maxit) iterating = FALSE
# otherwise determine new interval
else{
max.index = which(dep.list==maxdep)
if(length(max.index)==1){
lm = ifelse(max.index==1, interval[1], theta.list[max.index-1])
rm = ifelse(max.index==10, interval[2], theta.list[max.index+1])
}
else{
m1 = min(max.index); m2 = max(max.index)
lm = ifelse(m1==1, interval[1], theta.list[m1-1])
rm = ifelse(m2==10, interval[2], theta.list[m2+1])
}
interval = c(lm,rm)
iter=iter+1
}
}
maxdeps[i] = theta.list[which.max(dep.list)]
}
return(list(theta, mean(maxdeps), sd(maxdeps)))
}
dep.summary = matrix(rep(0,3*length(theta.range)), ncol=3)
cl <- makeCluster(detectCores())
registerDoSNOW(cl)
system.time(dep.summary <- foreach(theta = theta.range) %dopar% loopfun(theta))
dep.summary = matrix(unlist(dep.summary), ncol=3, byrow=T)
stopCluster(cl)
# plot(dep.summary[,2]~theta.range, xlim=c(0,1),ylim=c(0,1), type="p", pch=19, cex=1.2,
#      main=paste("Simulated maximum t-copula (df=",df,") depth estimators"),
#      xlab="Real parameter", ylab="Parameter with maxim um depth")
# for(i in 1:10){
#   segments(dep.summary[i,1],dep.summary[i,2]-dep.summary[i,3],
#            dep.summary[i,1],dep.summary[i,2]+dep.summary[i,3], lwd=2)
# }
# abline(0,1, lty=2)
# Fit cubic regression model
th = dep.summary[,1]; bth = dep.summary[,2]
summary(m <- lm(th ~ bth+I(bth^2)+I(bth^3)))
mat[i,] = c(df, m$coef, dep.summary[1,2])
}
mat
m
summary(m)
plot(dep.summary[,2]~theta.range, xlim=c(0,1),ylim=c(0,1), type="p", pch=19, cex=1.2,
main=paste("Simulated maximum t-copula (df=",df,") depth estimators"),
xlab="Real parameter", ylab="Parameter with maxim um depth")
for(i in 1:10){
segments(dep.summary[i,1],dep.summary[i,2]-dep.summary[i,3],
dep.summary[i,1],dep.summary[i,2]+dep.summary[i,3], lwd=2)
}
abline(0,1, lty=2)
library(VineCopula)
###### required for parallel computing
library(parallel)
library(doSNOW)
set.seed(006); N = 100
theta.range=seq(0,.99,.01)
dfs=c(25); mat=matrix(rep(0,6*length(dfs)), ncol=6)
for(i in 1:length(dfs)){
df = dfs[i]
## Simulates max depth copula estimators for all values in theta.range
loopfun = function(theta){
library(VineCopula)
maxdeps = rep(0,1000)
# Generate 1000 samples of size 100 each
for(i in 1:1000){
# Generate sample from t copula
U = BiCopSim(N, family=2, par=theta, par2=df)
u = U[,1]; v = U[,2]
est = BiCopEst(u, v, family=2, method='mle')
interval = c(0,.99)
# interval search algorithm
iterating=TRUE; iter=1; maxit=10
while(iterating){
theta.list = seq(interval[1], interval[2], length.out=10)
dep.list = rep(0,10)
for(j in 1:10){
del.loglik = BiCopDeriv(u,v,family=2,par=theta.list[j], par2=df, deriv="par") /
BiCopPDF(u,v,family=2,par=theta.list[j], par2=df)
dep.list[j] =(min(sum(del.loglik>0), sum(del.loglik<0)) + sum(del.loglik==0))/N
}
# stopping criteria
maxdep = max(na.omit(dep.list))
if(maxdep==0.5 || iter==maxit) iterating = FALSE
# otherwise determine new interval
else{
max.index = which(dep.list==maxdep)
if(length(max.index)==1){
lm = ifelse(max.index==1, interval[1], theta.list[max.index-1])
rm = ifelse(max.index==10, interval[2], theta.list[max.index+1])
}
else{
m1 = min(max.index); m2 = max(max.index)
lm = ifelse(m1==1, interval[1], theta.list[m1-1])
rm = ifelse(m2==10, interval[2], theta.list[m2+1])
}
interval = c(lm,rm)
iter=iter+1
}
}
maxdeps[i] = theta.list[which.max(dep.list)]
}
return(list(theta, mean(maxdeps), sd(maxdeps)))
}
dep.summary = matrix(rep(0,3*length(theta.range)), ncol=3)
cl <- makeCluster(detectCores())
registerDoSNOW(cl)
system.time(dep.summary <- foreach(theta = theta.range) %dopar% loopfun(theta))
dep.summary = matrix(unlist(dep.summary), ncol=3, byrow=T)
stopCluster(cl)
# plot(dep.summary[,2]~theta.range, xlim=c(0,1),ylim=c(0,1), type="p", pch=19, cex=1.2,
#      main=paste("Simulated maximum t-copula (df=",df,") depth estimators"),
#      xlab="Real parameter", ylab="Parameter with maxim um depth")
# for(i in 1:10){
#   segments(dep.summary[i,1],dep.summary[i,2]-dep.summary[i,3],
#            dep.summary[i,1],dep.summary[i,2]+dep.summary[i,3], lwd=2)
# }
# abline(0,1, lty=2)
# Fit cubic regression model
th = dep.summary[,1]; bth = dep.summary[,2]
summary(m <- lm(th ~ bth+I(bth^2)+I(bth^3)))
mat[i,] = c(df, m$coef, dep.summary[1,2])
}
mat
paste("Year",2002)
for(i i 1:10){paste("Year", i)}
for(i in 1:10){paste("Year", i)}
c = for(i i 1:10){paste("Year", i)}
c = for(i in 1:10){paste("Year", i)}
c
c=rep(0,10)
for(i in 1:10){ c[i] = concatenate("Year", as.character(i))}
for(i in 1:10){ c[i] = paste("Year", as.character(i))}
c
?paste
for(i in 1:10){ c[i] = paste("Year", as.character(i), sep="")}
c
library(Sleuth3)
head(case1202)
m.full = lm(Bsal ~ Senior+Age+Educ+Exper, data=case1202)
summary(m.full)
m.full = lm(log(Bsal) ~ Senior+Age+Educ+Exper, data=case1202)
summary(m.full)
step(m.full, direction="forward")
step(m.full, direction="backward")
?step
step(m.full, direction="backward", trace=F)
step(m0, scope=~Senior+Age+Educ+Exper, direction="forward")
m0 = lm(log(Bsal) ~ 1, data=case1202)
step(m0, scope=~Senior+Age+Educ+Exper, direction="forward")
step(m0, scope = ~Senior+Age+Educ+Exper, direction="forward", trace=F)
m.back = step(m.full, direction="backward", trace=F)
summary(m.back)
m.for = step(m0, scope = ~Senior+Age+Educ+Exper, direction="forward", trace=F)
summary(m.for)
m2.full = lm(log(Bsal) ~ (Senior+Age+Educ+Exper)^2, data=case1202)
summary(m2.full)
step(m2.full, direction="backward", trace=F)
m2.back = step(m2.full, direction="backward", trace=F); summary(m2.back)
m2.for = step(m0, scope = ~(Senior+Age+Educ+Exper)^2, direction="forward")
m2.for = step(m0, scope = ~(Senior+Age+Educ+Exper)^2, direction="forward", trace=F)
summary(m2.for)
summary(m2.back)
AIC(m2.back)
AIC(m2.for)
BreastTissue <- read.csv("C:/Study/UMN files/3022/BreastTissue.csv")
View(BreastTissue)
pairs(BreastTissue[, 3:11])
pairs(BreastTissue[, 3:11]); X = pobs(BreastTissue[, 3:11])
X = pobs(BreastTissue[, 3:11]); colnames(x) = colnames(BreastTissue)[3:11]
?pobs
library(copula)
X = pobs(BreastTissue[, 3:11]); colnames(x) = colnames(BreastTissue)[3:11]
X = pobs(BreastTissue[, 3:11]); colnames(X) = colnames(BreastTissue)[3:11]
View(X)
pairs(X)
names(X)
colnames(X)
m3.full = lm(P~I0+PA500+HFS+DA+Area+A.dA+Max.IP+DR, data=X)
m3.full = lm(P~I0+PA500+HFS+DA+Area+A.dA+Max.IP+DR, data=data.frame(X))
m3.full = lm(P~I0+PA500+HFS+DA+Area+A.DA+Max.IP+DR, data=data.frame(X))
summary(m3.full)
step(m3.full, direction="backward", trace=F)
step(m30, scope=~I0+PA500+HFS+DA+Area+A.DA+Max.IP+DR,
direction="forward", trace=F)
m30 = lm(P~1, data=data.frame(X))
step(m30, scope=~I0+PA500+HFS+DA+Area+A.DA+Max.IP+DR,
direction="forward", trace=F)
step(m3.full, direction="backward", trace=F)
View(case1202\)
View(case1202)
m4.full = lm(log(Bsal) ~ Senior+Age+Educ+Exper+Sex, data=case1202)
summary(m4.full)
m4.back = step(m4.full, direction="backward")
step(m0, scope = ~Senior+Age+Educ+Exper, direction="forward")
step(m.full, direction="backward", trace=F)
m4.back = step(m4.full, direction="backward", trace=F)
step(m4.full, direction="backward", trace=F)
install.packages("Rcmdr")
library(Rcmdr)
?stepwise
stepwise(m.full, direction="backward", criterion="BIC")
step(m.full, direction="backward", k=log(n))
n=length(case1202$Bsal)
step(m.full, direction="backward", k=log(n))
stepwise(m.full, direction="backward", criterion="BIC")
library(Sleuth3)
head(case1202)
pairs(case1202[,c(1,4,5,6,7)])
m.full = lm(log(Bsal) ~ Senior+Age+Educ+Exper, data=case1202)
summary(m.full)
step(m.full, direction="backward")
summary(m.full)
step(m.full, direction="backward", trace=F)
m0 = lm(log(Bsal) ~ 1, data=case1202)
step(m0, scope = ~Senior+Age+Educ+Exper, direction="forward")
step(m0, scope = ~Senior+Age+Educ+Exper, direction="forward", trace=F)
step(m.full, direction="backward", trace=F)
m4.full = lm(log(Bsal) ~ Senior+Age+Educ+Exper+Sex, data=case1202)
summary(m4.full)
m.full = lm(log(Bsal) ~ Senior+Age+Educ+Exper, data=case1202)
summary(m.full)
step(m4.full, direction="backward", trace=F)
step(m.full, direction="backward", trace=F)
View(case1202)
summary(m4.full)
step(m0, scope = ~Senior+Age+Educ+Exper+Sex, direction="forward", trace=F)
step(m4.full, direction="backward", trace=F)
m.back = step(m.full, direction="backward", trace=F)
summary(m.back)
m2.full = lm(log(Bsal) ~ (Senior+Age+Educ+Exper)^2, data=case1202)
summary(m2.full)
m2.back = step(m2.full, direction="backward", trace=F); summary(m2.back)
m2.for = step(m0, scope = ~(Senior+Age+Educ+Exper)^2, direction="forward", trace=F)
summary(m2.for)
m2.back
m2.for
AIC(m2.back)
AIC(m2.for)
BreastTissue <- read.csv("C:/Study/UMN files/3022/BreastTissue.csv")
pairs(BreastTissue[, 3:11])
library(copula)
X = pobs(BreastTissue[, 3:11]); colnames(X) = colnames(BreastTissue)[3:11]
BreastTissue <- read.csv("C:/Study/UMN files/3022/BreastTissue.csv")
pairs(BreastTissue[, 3:11])
library(copula)
X = pobs(BreastTissue[, 3:11]); colnames(X) = colnames(BreastTissue)[3:11]
pairs(X)
m3.full = lm(P ~ I0+PA500+HFS+DA+Area+A.DA+Max.IP+DR, data=data.frame(X))
summary(m3.full)
step(m3.full, direction="backward", trace=F)
m30 = lm(P~1, data=data.frame(X))
step(m30, scope=~I0+PA500+HFS+DA+Area+A.DA+Max.IP+DR,
direction="forward", trace=F)
cor(X[,4],X[,8])
cor(X[,4],X[,7])
cor(X[,8],X[,7])
step(m.full, direction="backward") # uses AIC
step(m.full, direction="backward", trace=F) # uses AIC
stepwise(m.full, direction="backward", criterion="BIC", trace=F)
library(Sleuth3)
head(case1202)
pairs(case1202[,c(1,4,5,6,7)])
m.full = lm(log(Bsal) ~ Senior+Age+Educ+Exper, data=case1202)
summary(m.full)
step(m.full, direction="backward")
summary(m.full)
step(m.full, direction="backward", trace=F)
m0 = lm(log(Bsal) ~ 1, data=case1202)
step(m0, scope = ~Senior+Age+Educ+Exper, direction="forward")
step(m.full, direction="backward", trace=F)
step(m0, scope = ~Senior+Age+Educ+Exper, direction="forward", trace=F)
m.back = step(m.full, direction="backward", trace=F); summary(m.back)
m4.full = lm(log(Bsal) ~ Senior+Age+Educ+Exper+Sex, data=case1202)
summary(m4.full)
step(m4.full, direction="backward", trace=F)
step(m0, scope = ~Senior+Age+Educ+Exper, direction="forward", trace=F)
step(m0, scope = ~Senior+Age+Educ+Exper+Sex, direction="forward", trace=F)
step(m4.full, direction="backward", trace=F)
m2.full = lm(log(Bsal) ~ (Senior+Age+Educ+Exper)^2, data=case1202)
summary(m2.full)
m2.back = step(m2.full, direction="backward", trace=F); summary(m2.back)
m2.for = step(m0, scope = ~(Senior+Age+Educ+Exper)^2, direction="forward", trace=F)
summary(m2.for)
m2.back
m2.for
AIC(m2.back)
AIC(m2.for)
BreastTissue <- read.csv("C:/Study/UMN files/3022/BreastTissue.csv")
pairs(BreastTissue[, 3:11])
library(copula)
X = pobs(BreastTissue[, 3:11]); colnames(X) = colnames(BreastTissue)[3:11]
pairs(X)
library(copula)
require(copula)
install.packages("lattice")
library(copula)
X = pobs(BreastTissue[, 3:11]); colnames(X) = colnames(BreastTissue)[3:11]
pairs(X)
m3.full = lm(P ~ I0+PA500+HFS+DA+Area+A.DA+Max.IP+DR, data=data.frame(X))
summary(m3.full)
step(m3.full, direction="backward", trace=F)
m30 = lm(P~1, data=data.frame(X))
step(m30, scope=~I0+PA500+HFS+DA+Area+A.DA+Max.IP+DR,
direction="forward", trace=F)
cor(X$Max.IP,X$DA)
x=data.frame(X)
X=data.frame(X)
cor(X$Max.IP,X$DA)
cor(X$Max.IP,X$DR)
library(Rcmdr)
stepwise(m.full, direction="backward", criterion="BIC", trace=F)
step(m.full, direction="backward", trace=F) # uses AIC
citation()
toBibtex(citation())
## Program to calculate the type of copula for each pair of variables and then estimate
## parameters, given data
library(MASS)
library(VineCopula)
library(copula)
library(network)
library(qgraph)
setwd('C:/study/my projects/depth')
source('functions.R')
## Simulated data
# n = 1000; p = 2
# X = BiCopSim(n, family=23, par=-3)
# real data: Breast Tissue data, UCI repository: https://archive.ics.uci.edu/ml/datasets/Breast+Tissue
BreastTissue = read.csv("C:/Study/My projects/depth/BreastTissue.csv", header=T)
X = BreastTissue[,3:11]
p=9; npairs=p*(p-1)/2
U = pobs(X); pairs(U)
graph.ml = CopNetwork(X, is.U=F, method='mle', quiet=F)
plot.CopNetwork(graph.ml, varnames=colnames(X),"Method- maximum likelihood", leg=F)
graph.md = CopNetwork(X, is.U=F, method='mde', quiet=F)
plot.CopNetwork(graph.md, varnames=colnames(X),"Method- maximum likelihood depth", leg=T)
cbind(graph.ml,graph.md[,3:5])
# Cardiotocography data: https://archive.ics.uci.edu/ml/datasets/Cardiotocography#
CTG = read.csv("C:/Study/My projects/depth/CTG.csv", header=T)
X = CTG[,-c(6,22)]
U = pobs(X)
graph.ml.ct = read.table("ctgraph.txt", header=T, quote="\"")
plot.CopNetwork(graph.ml.ct, varnames=colnames(X), "Method- maximum likelihood")
npairs = nrow(graph.ml.ct)
group.conns = cbind(matrix(rep(0,npairs*2),ncol=2),graph.ml.ct[,3])
for(i in 1:npairs){
group.conns[i,1] = ifelse(graph.ml.ct[i,1]<=6, 1, ifelse(graph.ml.ct[i,1]<=10, 2, 3))
group.conns[i,2] = ifelse(graph.ml.ct[i,2]<=6, 1, ifelse(graph.ml.ct[i,2]<=10, 2, 3))
}
# intra-group connections
type1 = group.conns[which(group.conns[,1]==group.conns[,2]),]; type1[is.na(type1[,3]),3] = 0
num1 = cbind(c(11,22,33),matrix(rep(0,21),ncol=7))
cop.list=c(0,1,2,3,23,4,24)
for(i in 1:3){
for(j in 1:7)
num1[i,j+1] = sum(type1[type1[,3]==cop.list[j],1]==i)
}
colnames(num1) = c("Type",as.character(cop.list)); num1
# inter-group connections
type2 = group.conns[which(group.conns[,1]!=group.conns[,2]),]; type2[is.na(type2[,3]),3] = 0
type2 = cbind(as.numeric(paste(type2[,1],type2[,2],sep="")),type2[,3])
num2 = cbind(c(12,13,23),matrix(rep(0,21),ncol=7))
for(i in 1:3){
for(j in 1:7)
num2[i,j+1] = sum(type2[type2[,2]==cop.list[j],1]==num2[i,1])
}
colnames(num2) = c("Type",as.character(cop.list)); num2
g1c.mlct = CopNetwork(g1[,11:20], is.U=F, method='mle', quiet=F)
g1 = X[which(CTG$NSP==1),]
g1c.mlct = CopNetwork(g1[,11:20], is.U=F, method='mle', quiet=F)
source('functions.R')
source('functions.R')
summary.CopNetwork(graph.ml.ct)
summary.CopNetwork(g1a.mlct)
summary.CopNetwork(g1c.mlct)
View(g1[,11:20])
View(g1[,11:20])
View(g1c.mlct)
g1c.mlct[,1:2] = g1c.mlct[,1:2]+10
summary.CopNetwork(g1c.mlct)
g2c.mlct = CopNetwork(g2[,11:20], is.U=F, method='mle', quiet=F)
g2 = X[which(CTG$NSP==2),]
g2c.mlct = CopNetwork(g2[,11:20], is.U=F, method='mle', quiet=F)
g2c.mlct[,1:2] = g2c.mlct[,1:2]+10
summary.CopNetwork(g2c.mlct)
g3 = X[which(CTG$NSP==3),]
g3c.mlct = CopNetwork(g3[,11:20], is.U=F, method='mle', quiet=F)
g3c.mlct[,1:2] = g3c.mlct[,1:2]+10
summary.CopNetwork(g3c.mlct)
load('t.coefs.rda')
View(t,coefs)
View(t.coefs)
?digits
t.coefs1 = round(t.corfs[,-1],4)
t.coefs1 = round(t.coefs[,-1],4)
View(t.coefs1)
t.coefs1 = cbind(t.coefs[1],round(t.coefs[,-1],4))
write.table(t.coefs1, file="t.coefs.txt")
